{"ast":null,"code":"import initialState from '../reducers/initState';\nimport mockPostData from '../reducers/mockPostData';\nexport var REQUEST_POSTS_LIST = 'PARSE_RSS_FEE';\nexport var REQUEST_SINGLE_POST = 'PARSE_SINGLE_PAGE';\nexport var RECEIVE_POSTS_LIST = 'RECEIVE_POSTS_LIST';\nexport var RECEIVE_SINGLE_POST = 'RECEIVE_SINGLE_POST';\nexport var SET_ROUTE = 'SET_ROUTE';\nexport function requestPostsList(url) {\n  return {\n    type: REQUEST_POSTS_LIST,\n    url: url\n  };\n}\nexport function setRoute(params) {\n  return {\n    type: SET_ROUTE,\n    action: params.action || false,\n    url: params.url ? decodeURIComponent(params.url) : false\n  };\n}\nexport function requestPost(url) {\n  return {\n    type: REQUEST_SINGLE_POST,\n    url: url\n  };\n}\nexport function receivePostsList(url, posts) {\n  return {\n    type: RECEIVE_POSTS_LIST,\n    url: url,\n    posts: posts,\n    date: Date.now()\n  };\n}\nexport function receivePost(url, post) {\n  return {\n    type: RECEIVE_SINGLE_POST,\n    url: url,\n    post: post,\n    date: Date.now()\n  };\n}\nexport function fetchPostsList(dispatch, url) {\n  dispatch(requestPostsList(url));\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      resolve(initialState);\n    }).then(function (json, error) {\n      if (!error) {\n        dispatch(receivePostsList(url, json));\n      } else {\n        console.error(error);\n      }\n    });\n  };\n}\nexport function parsePost(dispatch, url, id) {\n  dispatch(requestPost(url));\n  return function (dispatch) {\n    new Promise(function (resolve) {\n      resolve(mockPostData);\n    }).then(function (result, error) {\n      result.data_id = id;\n      dispatch(receivePost(url, result));\n    });\n  };\n}","map":{"version":3,"sources":["/var/www/html/news-parser/src/actions/action_dev.js"],"names":["initialState","mockPostData","REQUEST_POSTS_LIST","REQUEST_SINGLE_POST","RECEIVE_POSTS_LIST","RECEIVE_SINGLE_POST","SET_ROUTE","requestPostsList","url","type","setRoute","params","action","decodeURIComponent","requestPost","receivePostsList","posts","date","Date","now","receivePost","post","fetchPostsList","dispatch","Promise","resolve","then","json","error","console","parsePost","id","result","data_id"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,uBAAzB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAGA,OAAO,IAAMC,kBAAkB,GAAC,eAAzB;AACP,OAAO,IAAMC,mBAAmB,GAAC,mBAA1B;AACP,OAAO,IAAMC,kBAAkB,GAAC,oBAAzB;AACP,OAAO,IAAMC,mBAAmB,GAAC,qBAA1B;AACP,OAAO,IAAMC,SAAS,GAAC,WAAhB;AAIP,OAAO,SAASC,gBAAT,CAA2BC,GAA3B,EAA+B;AAClC,SAAO;AACHC,IAAAA,IAAI,EAACP,kBADF;AAEHM,IAAAA,GAAG,EAACA;AAFD,GAAP;AAIH;AACD,OAAO,SAASE,QAAT,CAAkBC,MAAlB,EAAyB;AAC5B,SAAO;AACHF,IAAAA,IAAI,EAACH,SADF;AAEHM,IAAAA,MAAM,EAACD,MAAM,CAACC,MAAP,IAAe,KAFnB;AAGHJ,IAAAA,GAAG,EAACG,MAAM,CAACH,GAAP,GAAWK,kBAAkB,CAACF,MAAM,CAACH,GAAR,CAA7B,GAA0C;AAH3C,GAAP;AAKH;AACD,OAAO,SAASM,WAAT,CAAsBN,GAAtB,EAA2B;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAACN,mBADF;AAEHK,IAAAA,GAAG,EAACA;AAFD,GAAP;AAIH;AACD,OAAO,SAASO,gBAAT,CAA2BP,GAA3B,EAA+BQ,KAA/B,EAAsC;AACzC,SAAO;AACHP,IAAAA,IAAI,EAACL,kBADF;AAEHI,IAAAA,GAAG,EAACA,GAFD;AAGHQ,IAAAA,KAAK,EAACA,KAHH;AAIHC,IAAAA,IAAI,EAACC,IAAI,CAACC,GAAL;AAJF,GAAP;AAMH;AACD,OAAO,SAASC,WAAT,CAAqBZ,GAArB,EAAyBa,IAAzB,EAA8B;AACjC,SAAO;AACHZ,IAAAA,IAAI,EAACJ,mBADF;AAEHG,IAAAA,GAAG,EAACA,GAFD;AAGHa,IAAAA,IAAI,EAAJA,IAHG;AAIHJ,IAAAA,IAAI,EAACC,IAAI,CAACC,GAAL;AAJF,GAAP;AAMH;AAED,OAAO,SAASG,cAAT,CAAwBC,QAAxB,EAAiCf,GAAjC,EAAqC;AACxCe,EAAAA,QAAQ,CAAChB,gBAAgB,CAACC,GAAD,CAAjB,CAAR;AACA,SAAO,UAAAe,QAAQ,EAAE;AACb,WAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAE;AACxBA,MAAAA,OAAO,CAACzB,YAAD,CAAP;AACH,KAFM,EAGN0B,IAHM,CAGD,UAACC,IAAD,EAAMC,KAAN,EAAc;AAChB,UAAG,CAACA,KAAJ,EAAU;AACVL,QAAAA,QAAQ,CAACR,gBAAgB,CAAEP,GAAF,EAAMmB,IAAN,CAAjB,CAAR;AACC,OAFD,MAEK;AACDE,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ,KATM,CAAP;AAUH,GAXD;AAYH;AACD,OAAO,SAASE,SAAT,CAAmBP,QAAnB,EAA4Bf,GAA5B,EAAgCuB,EAAhC,EAAmC;AACtCR,EAAAA,QAAQ,CAACT,WAAW,CAACN,GAAD,CAAZ,CAAR;AACA,SAAO,UAAAe,QAAQ,EAAE;AAAC,QAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAE;AAC/BA,MAAAA,OAAO,CAACxB,YAAD,CAAP;AACH,KAFa,EAGbyB,IAHa,CAGR,UAACM,MAAD,EAAQJ,KAAR,EAAgB;AAClBI,MAAAA,MAAM,CAACC,OAAP,GAAeF,EAAf;AACAR,MAAAA,QAAQ,CAACH,WAAW,CAACZ,GAAD,EAAKwB,MAAL,CAAZ,CAAR;AACH,KANa;AAOjB,GAPD;AAQH","sourcesContent":["import initialState from '../reducers/initState';\nimport mockPostData from '../reducers/mockPostData';\n\n\nexport const REQUEST_POSTS_LIST='PARSE_RSS_FEE';\nexport const REQUEST_SINGLE_POST='PARSE_SINGLE_PAGE';\nexport const RECEIVE_POSTS_LIST='RECEIVE_POSTS_LIST';\nexport const RECEIVE_SINGLE_POST='RECEIVE_SINGLE_POST';\nexport const SET_ROUTE='SET_ROUTE';\n\n\n\nexport function requestPostsList (url){\n    return {\n        type:REQUEST_POSTS_LIST,\n        url:url\n    }\n}\nexport function setRoute(params){\n    return {\n        type:SET_ROUTE,\n        action:params.action||false,\n        url:params.url?decodeURIComponent(params.url):false\n    }\n}\nexport function requestPost (url) {\n    return {\n        type:REQUEST_SINGLE_POST,\n        url:url\n    }\n}\nexport function receivePostsList (url,posts) {\n    return {\n        type:RECEIVE_POSTS_LIST,\n        url:url,\n        posts:posts,\n        date:Date.now()\n    }\n}\nexport function receivePost(url,post){\n    return {\n        type:RECEIVE_SINGLE_POST,\n        url:url,\n        post,\n        date:Date.now()\n    }\n}\n\nexport function fetchPostsList(dispatch,url){\n    dispatch(requestPostsList(url))\n    return dispatch=>{\n        return new Promise(resolve=>{\n            resolve(initialState)\n        })\n        .then((json,error)=>{\n            if(!error){\n            dispatch(receivePostsList (url,json))\n            }else{\n                console.error(error);\n            }\n        })\n    }\n}\nexport function parsePost(dispatch,url,id){\n    dispatch(requestPost(url));\n    return dispatch=>{new Promise(resolve=>{\n            resolve(mockPostData);\n        })\n        .then((result,error)=>{\n            result.data_id=id;\n            dispatch(receivePost(url,result));\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}