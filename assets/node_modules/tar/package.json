{
  "_args": [
    [
      "tar@^2.0.0",
      "/var/www/html/wpblog1/wp-content/plugins/news-parser/assert/node_modules/node-gyp"
    ]
  ],
  "_from": "tar@>=2.0.0 <3.0.0",
  "_hasShrinkwrap": false,
  "_id": "tar@2.2.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/tar",
  "_nodeVersion": "12.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tar_2.2.2_1557881062489_0.30195366078850117"
  },
  "_npmUser": {
    "email": "i@izs.me",
    "name": "isaacs"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "tar",
    "raw": "tar@^2.0.0",
    "rawSpec": "^2.0.0",
    "scope": null,
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/node-gyp"
  ],
  "_resolved": "https://registry.npmjs.org/tar/-/tar-2.2.2.tgz",
  "_shasum": "0ca8848562c7299b8b446ff6a4d60cdbb23edc40",
  "_shrinkwrap": null,
  "_spec": "tar@^2.0.0",
  "_where": "/var/www/html/wpblog1/wp-content/plugins/news-parser/assert/node_modules/node-gyp",
  "author": {
    "email": "i@izs.me",
    "name": "Isaac Z. Schlueter",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/node-tar/issues"
  },
  "dependencies": {
    "block-stream": "*",
    "fstream": "^1.0.12",
    "inherits": "2"
  },
  "description": "tar for node",
  "devDependencies": {
    "graceful-fs": "^4.1.2",
    "mkdirp": "^0.5.0",
    "rimraf": "1.x",
    "tap": "0.x"
  },
  "directories": {},
  "dist": {
    "fileCount": 88,
    "integrity": "sha512-FCEhQ/4rE1zYv9rYXJw/msRqsnmlje5jHP6huWeBZ704jUTy02c5AZyWujpMR1ax6mVw9NyJMfuK2CMDWVIfgA==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc22DnCRA9TVsSAnZWagAA4lQP/2kDncCwyD8KcVYRkVN8\npbvFvEqscpjN2kUNL/8G3ik0IsyXT97CCXGKKFFeZylEsFFFJuFNT0gcf0EO\nx990mlhSQ02b53uw4rJCEKa8Cqnwps7Qb2sx4D3lr8Pw+hghLU8LySls45dS\nJRmmrnlX0aFxGr5pAuJR4V5OHyEwXIN9q3VJ3WgOgwVOMOKqrP37r5xSeiDA\nbDclGxV5HPyESyMH4iioZtBGqrsRyhFB8R/+wL1CIzDaDHkuF4SRCNt7QE/l\n8KSdIwt5OGndRwoM9X2YO+9Sxjmfq/3GxdBGWRi9fTURTZ4Sj7fnn1TiV+8B\nW1z8OT7dKyaleE9fAO4iM2u1YS9D6XNriI4bCkUEAsgCPuIVFxDCutuPpBd2\noIsD59m1v9FTgyWx7tF8Vkh3hAD17TGiwA+mCJCna3+3RcyyhOPeCo0/nqAG\nfMcFeXThMrnM16UARt7zfMXdpil2oP/9SlRb43pFe2YzTuZZafhuCaytTIRl\noOKQubCTtWBUueSmBSoJrZQKxJCC4JTMa2zmz5vFcicxUXrQWVKEKnnbexW8\nZl+vf8RItEsytT6GiNDYZOFPvD3n8qxPxTWDwF9IpjnQYCGgBKLf8qhvc/6i\nsLPHKdCDf4aB+r8PjfMCfvDswNnJbMHrvH6/MkcNpZCj0nlunEgMrVpWXmd8\nIXVU\r\n=+U+B\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "0ca8848562c7299b8b446ff6a4d60cdbb23edc40",
    "tarball": "https://registry.npmjs.org/tar/-/tar-2.2.2.tgz",
    "unpackedSize": 1304644
  },
  "gitHead": "523c5c7fef48b10811fccd12b42803c61b6aead8",
  "homepage": "https://github.com/isaacs/node-tar#readme",
  "license": "ISC",
  "main": "tar.js",
  "maintainers": [
    {
      "name": "iarna",
      "email": "me@re-becca.org"
    },
    {
      "name": "isaacs",
      "email": "i@izs.me"
    },
    {
      "name": "soldair",
      "email": "soldair@gmail.com"
    },
    {
      "name": "zkat",
      "email": "kzm@sykosomatic.org"
    }
  ],
  "name": "tar",
  "optionalDependencies": {},
  "readme": "# node-tar\n\nTar for Node.js.\n\n[![NPM](https://nodei.co/npm/tar.png)](https://nodei.co/npm/tar/)\n\n## API\n\nSee `examples/` for usage examples.\n\n### var tar = require('tar')\n\nReturns an object with `.Pack`, `.Extract` and `.Parse` methods.\n\n### tar.Pack([properties])\n\nReturns a through stream. Use\n[fstream](https://npmjs.org/package/fstream) to write files into the\npack stream and you will receive tar archive data from the pack\nstream.\n\nThis only works with directories, it does not work with individual files.\n\nThe optional `properties` object are used to set properties in the tar\n'Global Extended Header'. If the `fromBase` property is set to true,\nthe tar will contain files relative to the path passed, and not with\nthe path included.\n\n### tar.Extract([options])\n\nReturns a through stream. Write tar data to the stream and the files\nin the tarball will be extracted onto the filesystem.\n\n`options` can be:\n\n```js\n{\n  path: '/path/to/extract/tar/into',\n  strip: 0, // how many path segments to strip from the root when extracting\n}\n```\n\n`options` also get passed to the `fstream.Writer` instance that `tar`\nuses internally.\n\n### tar.Parse()\n\nReturns a writable stream. Write tar data to it and it will emit\n`entry` events for each entry parsed from the tarball. This is used by\n`tar.Extract`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/node-tar.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "2.2.2"
}
